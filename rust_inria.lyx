#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass amsart
\begin_preamble
\usepackage{babel}
\end_preamble
\use_default_options false
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language french
\language_package default
\inputencoding auto
\fontencoding T1
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 0
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\is_math_indent 0
\math_numbering_side default
\quotes_style french
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Introduction à Rust
\end_layout

\begin_layout Author
Philippe Helluy
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Rust (rouille en Anglais) est un langage créé en 2009 par la fondation Mozilla.
 Les objectifs, comparés à C et C++ sont: 
\end_layout

\begin_layout Itemize
pas de fuite de mémoire ou de dépassement de tableaux; 
\end_layout

\begin_layout Itemize
détection de plus d'erreurs à la compilation; 
\end_layout

\begin_layout Itemize
pas de conflit d'accès pour les opérations parallèles; 
\end_layout

\begin_layout Itemize
mécanisme d'accès aux variables qui rend les exécutables très rapides; 
\end_layout

\begin_layout Itemize
utilitaire cargo qui remplace cmake, doxygen et ctest et qui télécharge
 automatiquement les dépendances.
\end_layout

\begin_layout Section
Bonjour Monde
\end_layout

\begin_layout Standard
Installation de Rust avec la commande
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline true
status open

\begin_layout Plain Layout

curl -$
\backslash
,$-proto '=https' -$
\backslash
,$-tlsv1.2 -sSf https://sh.rustup.rs | sh
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Création d'un nouveau projet
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

cargo new bonjour; cd bonjour
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Compilation et exécution du code
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

cargo run
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Explications: Cargo est le gestionnaire de paquets et de compilation de
 Rust.
 Comme en C, on pourrait compiler avec le compilateur rustc.
 Cargo remplace à la fois cmake et make.
 Le code source se trouve dans le dossier src.
 Ici il y a un seul fichier main.rs.
 Le fichier Cargo.toml est un fichier de configuration important.
 Il faut le modifier pour ajouter des bibliothèques (qui seront téléchargées
 automatiquement par Cargo).
\end_layout

\begin_layout Section
Résolution numérique de l'équation de transport
\end_layout

\begin_layout Standard
Équation de transport à vitesse 
\begin_inset Formula $c<0$
\end_inset

, d'inconnue 
\begin_inset Formula $u(x,t)$
\end_inset


\begin_inset Formula 
\[
\frac{\partial u}{\partial t}+c\frac{\partial u}{\partial x}=0,\quad,x\in\mathbb{R},\quad t\in]0,T[,
\]

\end_inset


\begin_inset Formula 
\[
u(x,0)=u^{0}(x).
\]

\end_inset

La solution exacte est donnée par
\begin_inset Formula 
\[
u(x,t)=u^{0}(x-ct).
\]

\end_inset

Schéma de différence finie décentré, 
\begin_inset Formula 
\[
u_{i}^{n}\simeq u(x_{i},t_{n}),\quad x_{i}=i\Delta x,\quad t_{n}=n\Delta t,
\]

\end_inset


\begin_inset Formula 
\[
\frac{u_{i}^{n+1}-u_{i}^{n}}{\Delta t}+c\frac{u_{i+1}^{n}-u_{i}^{n}}{\Delta x}=0,\quad u_{i}^{0}=u^{0}(x_{i}).
\]

\end_inset

On stocke les 
\begin_inset Formula $u_{i}^{n}$
\end_inset

 à l'instant 
\begin_inset Formula $n$
\end_inset

 dans un tableau 
\begin_inset Formula $\texttt{un[i]}$
\end_inset

, 
\begin_inset Formula $\texttt{0\ensuremath{\leq}i<nx+1}$
\end_inset

.
\end_layout

\begin_layout Standard
Programme Rust niveau 0.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

const C: f64 = -1.;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

const L: f64 = 1.;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

fn peak(x: f64) -> f64 {
\end_layout

\begin_layout Plain Layout

    let r2 = x * x;
\end_layout

\begin_layout Plain Layout

    let eps = 0.1;
\end_layout

\begin_layout Plain Layout

    let eps2 = eps * eps;
\end_layout

\begin_layout Plain Layout

    if r2 / eps2 < 1.
 {
\end_layout

\begin_layout Plain Layout

        (1.
 - r2 / eps2).powi(4)
\end_layout

\begin_layout Plain Layout

    } else {
\end_layout

\begin_layout Plain Layout

        0.
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

fn exact_sol(x: f64, t: f64) -> f64 {
\end_layout

\begin_layout Plain Layout

    peak(x - C * t - 0.8)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

use std::io::Error;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

fn main() -> Result<(), Error> {
\end_layout

\begin_layout Plain Layout

    let nx = 1000;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    let dx = L / nx as f64;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    let mut un = vec![0.; nx + 1];
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    let mut xc = vec![0.; nx + 1];
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    for i in 0..nx + 1 {
\end_layout

\begin_layout Plain Layout

        xc[i] = i as f64 * dx;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    for i in 0..nx + 1 {
\end_layout

\begin_layout Plain Layout

        un[i] = exact_sol(xc[i], 0.);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    let tmax = 0.6;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    let cfl = 0.8;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    let dt = dx / C.abs() * cfl;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    let mut t = 0.;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    while t < tmax {
\end_layout

\begin_layout Plain Layout

        for i in 0..nx {
\end_layout

\begin_layout Plain Layout

            un[i] = un[i] - C * dt / dx * (un[i + 1] - un[i]);
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

        t = t + dt;
\end_layout

\begin_layout Plain Layout

        un[nx] = exact_sol(xc[0], t);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        println!("t={}, dt={}", t, dt);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    use std::fs::File;
\end_layout

\begin_layout Plain Layout

    use std::io::{Write};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    let mut meshfile = File::create("trans.dat")?;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    for i in 0..nx + 1 {
\end_layout

\begin_layout Plain Layout

        let uex = exact_sol(xc[i], t);
\end_layout

\begin_layout Plain Layout

        let u = un[i];
\end_layout

\begin_layout Plain Layout

        writeln!(meshfile, "{} {} {}", xc[i], u, uex)?;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    Ok(())
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Programme Rust niveau 1
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// command line:
\end_layout

\begin_layout Plain Layout

// time RAYON_NUM_THREADS=8 cargo run --release
\end_layout

\begin_layout Plain Layout

use rayon::prelude::*;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//extern crate faster;
\end_layout

\begin_layout Plain Layout

//use faster::*;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

const C: f64 = -1.;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

const L: f64 = 1.;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

fn peak(x: f64) -> f64 {
\end_layout

\begin_layout Plain Layout

    let r2 = x * x;
\end_layout

\begin_layout Plain Layout

    let eps = 0.1;
\end_layout

\begin_layout Plain Layout

    let eps2 = eps * eps;
\end_layout

\begin_layout Plain Layout

    if r2 / eps2 < 1.
 {
\end_layout

\begin_layout Plain Layout

        (1.
 - r2 / eps2).powi(4)
\end_layout

\begin_layout Plain Layout

    } else {
\end_layout

\begin_layout Plain Layout

        0.
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

fn exact_sol(x: f64, t: f64) -> f64 {
\end_layout

\begin_layout Plain Layout

    peak(x - C * t - 0.8)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

fn main() {
\end_layout

\begin_layout Plain Layout

    println!("Init...");
\end_layout

\begin_layout Plain Layout

    let nx = 10000;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    let dx = L / nx as f64;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    let xc: Vec<f64> = (0..nx + 1).map(|i| i as f64 * dx).collect();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    let mut un: Vec<f64> = xc.par_iter().map(|x| exact_sol(*x, 0.)).collect();
\end_layout

\begin_layout Plain Layout

    let mut unp1 = un.clone();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    let tmax = 0.6;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    let cfl = 0.8;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    let dt = dx / C.abs() * cfl;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    let mut t = 0.;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    println!("Calcul...");
\end_layout

\begin_layout Plain Layout

    while t < tmax {
\end_layout

\begin_layout Plain Layout

        // original loop
\end_layout

\begin_layout Plain Layout

        // for i in 0..nx {
\end_layout

\begin_layout Plain Layout

        //     un[i] = un[i] - C * dt / dx * (un[i + 1] - un[i]);
\end_layout

\begin_layout Plain Layout

        // }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        // does not work: immutable borrow
\end_layout

\begin_layout Plain Layout

        // for (u0,u1) in un.iter_mut().zip(un.iter().skip(1)) {
\end_layout

\begin_layout Plain Layout

        //     *u0 = *u0 - C * dt / dx * (*u1 - *u0);
\end_layout

\begin_layout Plain Layout

        // }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        // correct solution with a for loop
\end_layout

\begin_layout Plain Layout

        // for ((u1, u0), v0) in unp1.iter_mut().zip(un.iter()).zip(un.iter().skip(1))
 {
\end_layout

\begin_layout Plain Layout

        //     *u1 = *u0 - C * dt / dx * (*v0 - *u0);
\end_layout

\begin_layout Plain Layout

        // }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        // parallel loop
\end_layout

\begin_layout Plain Layout

        unp1.par_iter_mut()
\end_layout

\begin_layout Plain Layout

            .zip(un.par_iter())
\end_layout

\begin_layout Plain Layout

            .zip(un.par_iter().skip(1)) // skip the first element: shifted
 vector
\end_layout

\begin_layout Plain Layout

            .for_each(|((u1, u0), v0)| *u1 = *u0 - C * dt / dx * (*v0 - *u0));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        t = t + dt;
\end_layout

\begin_layout Plain Layout

        unp1[nx] = exact_sol(xc[0], t);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        un.par_iter_mut()
\end_layout

\begin_layout Plain Layout

            .zip(unp1.par_iter())
\end_layout

\begin_layout Plain Layout

            .for_each(|(u0, u1)| *u0 = *u1);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        //println!("t={}, dt={}", t, dt);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    println!("Sauve...");
\end_layout

\begin_layout Plain Layout

    sauv_sol(t, xc, un);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

use std::fs::File;
\end_layout

\begin_layout Plain Layout

use std::io::BufWriter;
\end_layout

\begin_layout Plain Layout

use std::io::Write;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

fn sauv_sol(t: f64, xc: Vec<f64>, un: Vec<f64>) {
\end_layout

\begin_layout Plain Layout

    let meshfile = File::create("trans.dat").unwrap();
\end_layout

\begin_layout Plain Layout

    let mut meshfile = BufWriter::new(meshfile); // create a buffer for
 faster writes...
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    un.iter().zip(xc.iter()).for_each(|(u, x)| {
\end_layout

\begin_layout Plain Layout

        let uex = exact_sol(*x, t);
\end_layout

\begin_layout Plain Layout

        writeln!(meshfile, "{} {} {}", *x, *u, uex).unwrap();
\end_layout

\begin_layout Plain Layout

    });
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
